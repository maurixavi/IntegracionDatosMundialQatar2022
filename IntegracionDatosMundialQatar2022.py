# -*- coding: utf-8 -*-
"""IDATOS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mu9fJXH8kpp0GdJMQS7TdgPuemrY0Q0P

# Dataset Jugadores
"""

import pandas as pd 

!pip install Unidecode
from unidecode import unidecode

"""**Dataset Transfermarkt**"""

#Dataset original
players_tm = pd.read_csv('/content/DataSources/TransfermarktPlayers.csv')

players_tm.head(3)

#Eliminamos atributos que no seran de utilidad
atributesToDelete = ['current_club_id','country_of_birth','position', 'name','highest_market_value_in_gbp', 'agent_name', 'domestic_competition_id', 'club_name', 'image_url', 'last_season', 'url', ]
players_tm_filtered = players_tm.drop(atributesToDelete, axis = 1)
players_tm_filtered.head(3)

#Conversion Market Value (GBP a USD)
#Cotización: 1 GBP - 1.2386 USD (average GBP to USD exchange rate 2022, https://www.exchangerates.org.uk/)
gbp_to_usd_rate = 1.2386
players_tm_filtered['market_value_in_gbp'] = players_tm_filtered['market_value_in_gbp']*gbp_to_usd_rate

#Actualizamos nombre columna correspondiente: market_value_in_gbp -> market_value (usd)
players_tm_filtered.rename(columns = {'market_value_in_gbp':'market_value_in_usd'}, inplace = True)
players_tm_filtered.head(3)

#Actualizacion de los nombres de atributos de Dataset Original para construir Nuevo Dataset
players_tm_filtered.rename(columns = {'pretty_name':'known_as',
                                      'club_pretty_name':'club_name',
                                      'country_of_citizenship':'nationality',
                                      'sub_position':'position',
                                      'foot':'preferred_foot',
                                      'height_in_cm':'height_in_cm'
                                      }, inplace = True)
players_tm_filtered.head(5)

pd.options.mode.chained_assignment = None  

#NORMALIZACION NOMBRES 
#Normalizamos nombres de los jugadores, removiendo acentos, simbolos y caracteres caracteristicos de otros idiomas
#Ejemplos: 'Kožušček' -> 'Kozuscek', 'François' -> 'Francois'

players = players_tm_filtered['known_as']

for i in range(0,len(players)):
  players[i] = unidecode(players[i])

players_tm_filtered['known_as'] = players

players_tm_filtered.head(3)

#Se agrega una columna 'age' correspondiente a la edad calculada de los jugadores 
#Objetivo es matchear con jugadores del otro dataset a partir del nombre y la edad
#Dato 'age' en Fifa23PlayersData actualizado hasta el 2022-07-01 inclusive
from datetime import date

def calculateAge(birthDate):
    age = 2022 - birthDate.year - ((7, 1) < (birthDate.month, birthDate.day))
    return age   

dfcopy = players_tm_filtered.copy()
dates = dfcopy['date_of_birth']

for i in range(0,len(dates)):
  if(not pd.isna(dates[i])):
    year = str(dates[i])[0:4]
    month = str(dates[i])[5:7]
    day = str(dates[i])[8:10]
    dates[i] = calculateAge(date(int(year), int(month), int(day)))
  else:
    dates[i] = -1


players_tm_filtered['age'] = dates

players_tm_filtered.head(3)

#Transformacion de dato 'position'
#Conversion de nombre completo posicion (ej.: Central Midfield) a la posicion abreviada por sus iniciales (ej.: CM)

for p in players_tm_filtered:
  players_tm_filtered['position'] = players_tm_filtered['position'].str.replace('[^A-Z]', '',  regex=True)

players_tm_filtered.head(5)

"""**Dataset FIFA23**"""

players_fifa23 = pd.read_csv('/content/DataSources/Fifa23PlayersData.csv')
players_fifa23.head(3)

#Nos quedaremos con los siguientes atributos
atributes = ['Known As','Full Name','Overall','Value(in Euro)','Best Position',	'Nationality','Age','Height(in cm)','Weight(in kg)','Club Name','Preferred Foot', 'Shooting Total','Passing Total','Dribbling Total','Defending Total','Physicality Total','Freekick Accuracy','Penalties']

players_fifa23_filtered = players_fifa23.loc[:, atributes]
players_fifa23_filtered.head(3)

#Conversion Market Value (Euro a USD)
#Cotización: 1 GBP - 1.0533 USD (average Euro to USD exchange rate 2022, https://www.exchangerates.org.uk/)
euro_to_usd_rate = 1.0533
players_fifa23_filtered['Value(in Euro)'] = players_fifa23_filtered['Value(in Euro)']*euro_to_usd_rate

#Actualizamos nombre columna correspondiente: Value(in Euro) -> market_value (usd)
players_fifa23_filtered.rename(columns = {'Value(in Euro)':'market_value_in_usd'}, inplace = True)
players_fifa23_filtered.head(3)

#Actualizacion de los nombres de atributos de Dataset Original para construir Nuevo Dataset
from re import sub
def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

#Primero convertimos todos los nombres a un formato snake case para facilitar el trabajo
for col in players_fifa23_filtered.columns:
    players_fifa23_filtered.rename(columns={col:snake_case(col)},inplace=True)

#Luego realizamos cambios mas especificos a los nombres de atributos segun se ajuste al dataframe deseado
players_fifa23_filtered.rename(columns = {'market_value_(usd)':'market_value_in_usd',
                                      'best_position':'position',
                                      'height(in_cm)':'height_in_cm',
                                      'weight(in_kg)':'weight_in_kg'
                                      }, inplace = True)

players_fifa23_filtered.head(3)

#Normalizacion nombres jugadores: atributos 'known_as' y 'full_name'
players = players_fifa23_filtered['known_as']
players_fn = players_fifa23_filtered['full_name']

for i in range(0,len(players)):
  players[i] = unidecode(players[i])
  players_fn[i] = unidecode(players_fn[i])

players_fifa23_filtered['known_as'] = players
players_fifa23_filtered['full_name'] = players_fn

players_fifa23_filtered.head(5)

"""**Integración entre datasets TransfermarktPlayers y Fifa23PlayersData:**"""

transfermarktPlayers = players_tm_filtered
fifa23PlayersData = players_fifa23_filtered

"""Matcheo por nombre de jugador, nacionalidad y edad:"""

#Matching de jugadores entre ambos conjuntos por 'known_as' 
#Transfermarket(known_as,nationality,age) x FIFA(known_as,nationality,age)
playersUnionByKnownAs = pd.merge(transfermarktPlayers, fifa23PlayersData, how='inner', on=['known_as','nationality','age'])

#playersUnionByKnownAs.to_csv('playersUnionByKnownAs.csv')
playersUnionByKnownAs

#Matching de jugadores entre ambos conjuntos por 'known_as' y 'full_name'
#Transfermarket(known_as,nationality,age) x FIFA(full_name,nationality,age)
playersUnionByKnownAsFullName = pd.merge(transfermarktPlayers, fifa23PlayersData, left_on=['known_as','nationality','age'], right_on=['full_name','nationality','age'])

playersUnionByKnownAsFullName

#Se unen los dos conjuntos parciales obtenidos a partir del matcheo entre ambos datasets
players = pd.concat([playersUnionByKnownAsFullName,playersUnionByKnownAs])

players

"""Limpieza de los datos integrados:"""

print(players.columns)
dfcopy = players.copy()

#Por último, realizaremos un filtrado de atributos 
#al dataset Players obtenido resultante de la integracion de ambos conjuntos

#Se integran los datos de las columnas 'known_as' y 'known_as_x' en la primera
#Luego, se elimina la columna 'known_as_x'
players['known_as'] = dfcopy['known_as'].fillna(dfcopy['known_as_x'])

players = players.drop(['known_as_x'], axis = 1)
players = players.drop(['known_as_y'], axis = 1)

#ATRIBUTOS DUPLICADOS con VALORES DIFERENTES
#Se eliminaran las columnas que contenga el dato más desactualizado, 
#dejando aquellos correspondientes al dataset de Fifa23PlayersData al haber sido actualizado más recientemente
atributesToDelete = ['club_name_x','position_x','height_in_cm_x', 'preferred_foot_x',
                     'market_value_in_usd_x']

#Antes de eliminar se integraran los datos de las columnas a eliminar que podrian no estar (NaN) en la columna que se mantiene
players['club_name_y'] = dfcopy['club_name_y'].fillna(dfcopy['club_name_x'])
players['position_y'] = dfcopy['position_y'].fillna(dfcopy['position_x'])
players['height_in_cm_y'] = dfcopy['height_in_cm_y'].fillna(dfcopy['height_in_cm_x'])
players['preferred_foot_y'] = dfcopy['preferred_foot_y'].fillna(dfcopy['preferred_foot_x'])
players['market_value_in_usd_y'] = dfcopy['market_value_in_usd_y'].fillna(dfcopy['market_value_in_usd_x'])

players = players.drop(atributesToDelete, axis = 1)


#Por ultimo se renombran atributos y se obtiene el conjunto de datos final
players.rename(columns = {'club_name_y':'club_name',
                                      'position_y':'position',
                                      'height_in_cm_y':'height_in_cm',
                                      'preferred_foot_y':'preferred_foot',
                                      'market_value_in_usd_y':'market_value_in_usd'
                                      }, inplace = True)

players

"""**Dataset Players finalizado:**"""

#Se guarda el dataset construido a partir de la integración en un archivo csv:
players.to_csv('Players.csv')

players

"""**Dataset FifaWorldCup2022Squads** (se agrega atributo *player_id*)"""

#Dataset orignal
fifaworldcup2022_squads = pd.read_csv('/content/DataSources/FifaWorldCup2022Squads.csv')
fifaworldcup2022_squads

#NORMALIZACION NOMBRES 
#Normalizamos nombres de los jugadores, removiendo acentos, simbolos y caracteres caracteristicos de otros idiomas
#Ejemplos: 'Kožušček' -> 'Kozuscek', 'François' -> 'Francois'
playersAux = fifaworldcup2022_squads['player name']

for i in range(0,len(playersAux)):
  playersAux[i] = unidecode(playersAux[i])

fifaworldcup2022_squads['player name'] = playersAux

for col in fifaworldcup2022_squads.columns:
    fifaworldcup2022_squads['player name'] = fifaworldcup2022_squads['player name'].str.replace('-', ' ')

fifaworldcup2022_squads.head(3)

fwc2022squads = fifaworldcup2022_squads

fwc2022squads.rename(columns = {'player name':'known_as'
                                      }, inplace = True)

#Matching de jugadores entre ambos conjuntos por 'player_name' y 'known_as'
#fwc2022squads(known_as,nationality) x players(full_name,nationality)
players_aux = pd.merge(fwc2022squads, players, how='left', on=['known_as','nationality'])

#Nos quedaremos con los siguientes atributos
atributes = ['player_id','known_as', 'nationality']
players_aux = players_aux.loc[:, atributes]

players_aux

players_aux

fifaworldcup2022_squads = players_aux

fwc2022squads.rename(columns = {'known_as':'player_name'
                                      }, inplace = True)

fifaworldcup2022_squads

#Se guarda el csv actualizado :
fifaworldcup2022_squads.to_csv('FifaWorldCup2022Squads.csv')

players

"""# Dataset Partidos Internacionales

**Dataset International Matches**
"""

#Dataset orignal
international_matches = pd.read_csv('/content/DataSources/InternationalMatches.csv')
international_matches.head(3)

international_matches.columns

#Nos quedaremos con los siguientes atributos:
atributes = ['date','home_team','away_team','home_team_fifa_rank','away_team_fifa_rank','home_team_score','away_team_score','tournament','country','neutral_location','shoot_out','home_team_result']

international_matches_filtered = international_matches.loc[:, atributes]

international_matches_filtered.head(3)

#Se agrega atributo 'year': Año en que se jugo el partido
#Dato extraido del campo 'date':
dfcopy = international_matches_filtered.copy()
years = dfcopy['date']

for i in range(0,len(years)):
  years[i] = years[i][0:4]

international_matches_filtered['year'] = years
international_matches_filtered.head(3)

#Normalizacion nombres paises: atributos 'home_team' y 'away_team'
teams_home = international_matches_filtered['home_team']
teams_away = international_matches_filtered['away_team']

for i in range(0,len(teams_home)):
  teams_home[i] = unidecode(teams_home[i])
  teams_away[i] = unidecode(teams_away[i])

international_matches_filtered['home_team'] = teams_home
international_matches_filtered['away_team'] = teams_away

international_matches_filtered.head(10)

international_matches_filtered.columns

"""**Dataset World Cup Matches**"""

#Dataset orignal
worldcup_matches = pd.read_csv('/content/DataSources/WorldCupMatches.csv')
worldcup_matches.head(3)

#Nos quedaremos con los siguientes atributos:
atributes = ['Year','Datetime','Stage','Home Team Name','Home Team Goals','Away Team Goals','Away Team Name','Win conditions']

worldcup_matches_filtered = worldcup_matches.loc[:, atributes]

worldcup_matches_filtered.head(3)

#Detectamos que a partir de la fila #854 se tienen datos inutiles
#Eliminamos filas con datos NaN
worldcup_matches_filtered = worldcup_matches_filtered.dropna()
worldcup_matches_filtered.tail(3)

#Actualizacion de los nombres de atributos de Dataset Original para construir Nuevo Dataset
from re import sub
def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

#Primero convertimos todos los nombres a un formato snake case para facilitar el trabajo
for col in worldcup_matches_filtered.columns:
    worldcup_matches_filtered.rename(columns={col:snake_case(col)},inplace=True)

#Luego realizamos cambios mas especificos a los nombres de atributos segun se ajuste al dataframe deseado
worldcup_matches_filtered.rename(columns = {'datetime':'date',
                                      'home_team_name':'home_team',
                                      'away_team_name':'away_team',
                                      'home_team_goals':'home_team_score',
                                      'away_team_goals':'away_team_score'
                                      }, inplace = True)


worldcup_matches_filtered.head(3)

#Agregamos columna para atributo 'tournament'
#Todos partidos tendran tournament='FIFA World Cup'
for col in worldcup_matches_filtered:
    worldcup_matches_filtered['tournament'] = 'FIFA World Cup'

#Agregamos worldcup_id: valor compuesto por el campo 'tournament' más el año segun atributo 'year'
matches_aux = worldcup_matches_filtered.copy()
matches = matches_aux['year'].map(str)  

for i in range(0,len(matches)):
  matches[i] = str(matches[i])

matches_aux['year'] = matches
#matches_aux['year'] = matches_aux['year'].map(str)  

for col in worldcup_matches_filtered:
    worldcup_matches_filtered['worldcup_id'] = worldcup_matches_filtered['tournament'].str.replace(' ', '') + matches_aux['year']
    worldcup_matches_filtered['worldcup_id'] = worldcup_matches_filtered['worldcup_id'].str[:-2]

worldcup_matches_filtered

#Normalizacion nombres paises: atributos 'home_team' y 'away_team'
teams_home = worldcup_matches_filtered['home_team']
teams_away = worldcup_matches_filtered['away_team']

for i in range(0,len(teams_home)):
  teams_home[i] = unidecode(teams_home[i])
  teams_away[i] = unidecode(teams_away[i])

worldcup_matches_filtered['home_team'] = teams_home
worldcup_matches_filtered['away_team'] = teams_away

worldcup_matches_filtered.tail(75)

#Conversion formatos fechas: 'DD MonthNameInitials YYYY' -> 'YYYY-MM-DD' 
#(Ejemplo: "13 Jul 1930" -> "1930-07-13")

def monthToNum(shortMonth):
    return {
            'Jan': '01',
            'Feb': '02',
            'Mar': '03',
            'Apr': '04',
            'May': '05',
            'Jun': '06',
            'Jul': '07',
            'Aug': '08',
            'Sep': '09', 
            'Oct': '10',
            'Nov': '11',
            'Dec': '12'
    }[shortMonth]


dates = worldcup_matches_filtered['date']

for i in range(0,len(dates)):
  year = dates[i][7:11]
  month = monthToNum(dates[i][3:6])
  day = dates[i][0:2]
  dates[i] = year+"-"+month+"-"+day

worldcup_matches_filtered['date'] = dates

worldcup_matches_filtered.head(3)

worldcup_matches_filtered.columns

"""**Integración entre datasets internationalMatches y WorldCupMatches:**"""

internationalMatchesDataset = international_matches_filtered
worldCupMatchesDataset = worldcup_matches_filtered

"""Matcheo por nombre de seleccion local y visitante, torneo y fecha del partido:"""

#Matching de jugadores entre ambos conjuntos por 'known_as' 
#InternationalMatches(home_team,away_team,tournament,date) x WorldCupMatches(home_team,away_team,tournament,date)
internationalMatches =  pd.merge(internationalMatchesDataset, worldCupMatchesDataset, how='outer', on=['home_team','away_team','tournament','date'])

internationalMatches

"""Limpieza de los datos integrados:"""

#Se eliminan las columnas con atributos duplicados y elementos vacios dado el tipo de merge aplicado
atributesToDelete = ['home_team_score_y','away_team_score_y','year_y']

internationalMatches = internationalMatches.drop(atributesToDelete, axis = 1)

#Por ultimo se renombran atributos y se obtiene el conjunto de datos final
internationalMatches.rename(columns = {'home_team_score_x':'home_team_score',
                                      'away_team_score_x':'away_team_score',
                                      'year_x':'year'
                                      }, inplace = True)

internationalMatches

"""**Dataset InternationalMatches final:**"""

#Se almacena el dataset construido a partir de la integración en un archivo csv:
internationalMatches.to_csv('InternationalMatches.csv')

internationalMatches

internationalMatches.columns

"""Dataset unicamente con partidos de Copas del Mundo a partir del dataset integrado"""

matchesAux = internationalMatches.copy()
dfcopy = internationalMatches.copy()
partidosMundiales = dfcopy['tournament']

for i in range(0,len(partidosMundiales)):
  partidosMundiales[i] = str(partidosMundiales[i])

matchesAux['tournament'] = partidosMundiales

internationalMatches_FifaWorldCup = matchesAux.loc[matchesAux['tournament'] == 'FIFA World Cup'] 

#Archivo csv generado: 
internationalMatches_FifaWorldCup.to_csv('InternationalMatches_FifaWorldCup.csv')

internationalMatches_FifaWorldCup

"""**Dataset WorldCups (Historico Mundiales):** (inclusión atributo identificador edición *'worldcup_id'*)"""

#Dataset orignal
worldcups = pd.read_csv('/content/DataSources/WorldCups.csv')
worldcups.head(10)

worldcup_historic = worldcups

#Conversion de nomenclatura de atributos
for col in worldcup_historic.columns:
    worldcup_historic.rename(columns={col:snake_case(col)},inplace=True)

#Eliminamos atributos que no seran de utilidad
atributesToDelete = ['goals_scored','qualified_teams','matches_played', 'attendance' ]
worldcup_historic = worldcup_historic.drop(atributesToDelete, axis = 1)

worldcup_historic.head(10)

#ID WORLDCUP (edición torneo)
#Agregamos worldcup_id: valor compuesto por el texto "FIFAWorldCup" más el año de disputa de la competición
fwc_aux = worldcup_historic.copy()
worldcup = fwc_aux['year'].map(str)  

for i in range(0,len(worldcup)):
  worldcup[i] = str(worldcup[i])

fwc_aux['year'] = worldcup

for col in worldcup_historic:
    worldcup_historic['worldcup_id'] = "FIFAWorldCup" + fwc_aux['year']

worldcup_historic

#Dataset csv actualizado: 
worldcup_historic.to_csv('WorldCups.csv')

"""**Dataset FifaWorldCup2022:** """

#Dataset orignal
fifaWorldCup2022 = pd.read_csv('/content/DataSources/FifaWorldCup2022.csv')
fifaWorldCup2022.head(10)

fwc2022 = fifaWorldCup2022

#Conversion de nomenclatura de atributos
for col in fwc2022.columns:
    fwc2022.rename(columns={col:snake_case(col)},inplace=True)


fwc2022.head(10)

#Dataset csv actualizado: 
fwc2022.to_csv('FifaWorldCup2022.csv')

"""# Metadatos finales"""

from IPython.display import Image
Image("/content/Metadatos.png")